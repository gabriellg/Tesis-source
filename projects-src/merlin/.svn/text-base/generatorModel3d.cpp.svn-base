/* -----------------------------------------------------------------------------
*  generatorSource.cpp
*  License: GNU Public License
* ----------------------------------------------------------------------------*/

#include "CGenUtil.inl"
#include "IGenerator.hpp"

#include "asrtbas.h"
#include "CString.hpp"
#include "CFileName.hpp"
#include "CArrayString.hpp"
#include "CReaderModel3d.hpp"

class GeneratorModel3d : public IGenerator
{
    public:

        virtual unsigned short versionGeneration(void) const;
        virtual bool isFileSource(const char *fileSource) const;
        virtual bool isFileGenerated(const char *fileSource) const;
        virtual char *nameFileGenerated(const char *fileSource) const;
        virtual void createSource(const char *fileSource, class CArrayString *codeFile) const;
};

//-----------------------------------------------------------------------

unsigned short GeneratorModel3d::versionGeneration(void) const
{
    return 0;
}

//-----------------------------------------------------------------------

bool GeneratorModel3d::isFileSource(const char *fileSource) const
{
    bool isFileModel3d;
    char *extFile;

    extFile = CFileName::getExtension(fileSource);

    if (CString::equalWithoutMatchCase(extFile, "3ds") == true)
        isFileModel3d = true;
    else if (CString::equalWithoutMatchCase(extFile, "obj") == true)
        isFileModel3d = true;
    else
        isFileModel3d = false;

    CString::free(&extFile);

    return isFileModel3d;
}

//-----------------------------------------------------------------------

bool GeneratorModel3d::isFileGenerated(const char *fileSource) const
{
    bool isFileGenerated;
    char *extFile;

    extFile = CFileName::getExtension(fileSource);

    isFileGenerated = CString::equalWithoutMatchCase(extFile, "c3d");

    CString::free(&extFile);

    return isFileGenerated;
}

//-----------------------------------------------------------------------

char *GeneratorModel3d::nameFileGenerated(const char *fileSource) const
{
    char *nameFileDest;

    nameFileDest = CFileName::changeExtension(fileSource, "c3d");

    return nameFileDest;
}

//-----------------------------------------------------------------------

static class CArrayString *prv_bodyModel3d(const char *fileSource)
{
    class CModel3d *model;

    model = CReaderModel3d::readModel3d(fileSource);



    return NULL;
}

//-----------------------------------------------------------------------

void GeneratorModel3d::createSource(const char *fileSource, class CArrayString *sourceCode) const
{
    class CArrayString *bodyCode;

    assert_no_null(sourceCode);

    sourceCode->add("// File type model 3d generated");

    CGenUtil::appendLineWhite(sourceCode);
    CGenUtil::appendLineWhite(sourceCode);
    CGenUtil::appendComentary(sourceCode);
    CGenUtil::appendLineWhite(sourceCode);

    {
        char *nameFuncion, *nameFileSource, *nameModel, *extSource;

        nameFileSource = CFileName::getFileNameWithoutExtension(fileSource);
        extSource = CFileName::getExtension(fileSource);
        nameModel = CString::endExtractFromChar(nameFileSource, '_');

        nameFuncion = NULL;
        CString::concatenate(&nameFuncion, "prv_");
        CString::concatenate(&nameFuncion, nameModel);
        CString::concatenate(&nameFuncion, "_");
        CString::concatenate(&nameFuncion, extSource);

        CGenUtil::appendStaticFunctionDefinition("class CModel3d *", nameFuncion, "void", sourceCode);

        CString::free(&nameFuncion);
        CString::free(&nameFileSource);
        CString::free(&extSource);
        CString::free(&nameModel);
    }

    bodyCode = prv_bodyModel3d(fileSource);

    CGenUtil::appendBodyCode(0, &bodyCode, sourceCode);
    CGenUtil::appendLineWhite(sourceCode);
}


//---------------------------------------------------------------

int main(int argc, char *argv[])
{
    if (argc > 1)
    {
        const char *nameFile;

        nameFile = argv[1];
    }

    return 0;
}
